<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Grain</title>
  
  
  <link href="https://www.dgrain.top/atom.xml" rel="self"/>
  
  <link href="https://www.dgrain.top/"/>
  <updated>2020-12-04T08:52:49.371Z</updated>
  <id>https://www.dgrain.top/</id>
  
  <author>
    <name>Grain</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java利用反射实现文件的读取</title>
    <link href="https://www.dgrain.top/2020/12/03/java%E5%88%A9%E7%94%A8%E5%8F%8D%E5%B0%84%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E7%9A%84%E8%AF%BB%E5%8F%96/"/>
    <id>https://www.dgrain.top/2020/12/03/java%E5%88%A9%E7%94%A8%E5%8F%8D%E5%B0%84%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E7%9A%84%E8%AF%BB%E5%8F%96/</id>
    <published>2020-12-03T11:32:49.576Z</published>
    <updated>2020-12-04T08:52:49.371Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="java反射"><a href="#java反射" class="headerlink" title="java反射"></a>java反射</h3><p>java从很早的版本开始就引入了反射机制，java如今的框架底层大部分也都是使用反射实现的。<br>这篇博客就去探索下java反射使用的方便之处。</p><p>要说java的反射机制，肯定离不开Class这个类，我们从jdk的源码可以看到这个类在jdk1.0的时候就存在了。<br><img src="https://img-blog.csdnimg.cn/20201010234247142.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2pqal9fX2pqag==,size_16,color_FFFFFF,t_70#pic_center" alt="class"><br>由于我这边需要用到文件读写的功能，同时又希望写的方法相对来说比较抽象，能在多出直接使用，于是我就想到了java的反射机制。</p><blockquote><p>首先这边先把我的读取文件的方法展示出来</p></blockquote><p><code>这个是用到的接口类</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现该接口中的方法，本来打算在FileUtils中调用该方法来生成实体对象，现已使用反射实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;E&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Readable</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">E <span class="title">readStr</span><span class="params">(Object[] objs)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于在方法中使用了泛型，想要调用某个自定义的方法，就只能规定泛型的类要实现某个接口，这样就可以直接调用接口中的方法。<br><code>下面是我的文件读取方法</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从文件中读取所需要的数据，并自动生成class对象添加到List中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tailPath 文件的名字（须带扩展名）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz List中存储对象的Class对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> paramType 所存入的对象的构造函数的参数的Class对象（该构造函数不能被private或protect修饰）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; List中的泛型，也就是List中存储对象的类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 通过读取文件所得到的List对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalAccessException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InstantiationException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvocationTargetException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchMethodException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Readable&lt;T&gt;&gt; <span class="function">MyList&lt;T&gt; <span class="title">read</span><span class="params">(String tailPath, Class&lt;T&gt; clazz, Class[] paramType)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, IllegalAccessException, InstantiationException, InvocationTargetException, NoSuchMethodException </span>&#123;</span><br><span class="line">        <span class="comment">// basePath要读取文件的文件夹路径</span></span><br><span class="line">        String path = basePath + <span class="string">&quot;\\&quot;</span> + tailPath;</span><br><span class="line">        <span class="comment">// 创建一个文件流</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(path));</span><br><span class="line">        <span class="comment">// 这个MyArrayList是我自己写的一个顺序表，可直接替换成java提供的ArrayList</span></span><br><span class="line">        MyList&lt;T&gt; list = <span class="keyword">new</span> MyArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 通过方法传入的class和参数列表获取类的构造方法</span></span><br><span class="line">        Constructor&lt;T&gt; constructor = clazz.getConstructor(paramType);</span><br><span class="line">        <span class="comment">// new一个object数组来存放读取的数据（存放构造函数的参数）</span></span><br><span class="line">        Object[] objs = <span class="keyword">new</span> Object[paramType.length];</span><br><span class="line">        String str = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 没有读到文件的尾部就一直读取文件</span></span><br><span class="line">        <span class="keyword">while</span> ((str = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 读取到的字符串以空格分隔</span></span><br><span class="line">            String[] data = str.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; paramType.length;i++) &#123;</span><br><span class="line">            <span class="comment">// 构建构造函数的参数</span></span><br><span class="line">                Object o = paramType[i].getConstructor(String.class).newInstance(data[i]);</span><br><span class="line">                objs[i] = o;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 通过调用之前获取到的构造方法来创建泛型对象</span></span><br><span class="line">            T t = constructor.newInstance(objs);</span><br><span class="line">            list.add(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭文件流</span></span><br><span class="line">        br.close();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>利用上面的这个方法，我们就可以实现不同类的读取，只要该类实现了自己定义的Readable接口，就可以直接通过该方法读取文件中的数据。（文件中的数据一行为一个类的数据，数据以空格分隔）</p><p>使用反射的目的就是为了使带代码跟抽象，代码抽象的好处可以提高代码的复用率，减少代码的冗余。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;java反射&quot;&gt;&lt;a href=&quot;#java反射&quot; class=&quot;headerlink&quot; title=&quot;java反射&quot;&gt;&lt;/a&gt;java反射&lt;/h3&gt;&lt;p&gt;java从很早的版本开始就引入了反射机制，java如今的框架底层大部分也都是使用反射实现的。&lt;br</summary>
      
    
    
    
    
  </entry>
  
</feed>
